{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","utils/setContent.js","components/charInfo/CharInfo.js","components/searchForm/SearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorBoundary/ErrorBoundary.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","_jsxs","className","children","includes","length","concat","slice","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","setContent","process","Component","data","Error","_ref2","comics","CharInfo","charId","setProcess","SearchForm","getCharacterByName","Formik","initialValues","text","validationSchema","Yup","min","required","onSubmit","values","Form","Field","type","onFocus","Link","to","MainPage","selectedChar","setSelectedChar","ErrorBoundary","decoration","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render"],"mappings":"iGAAe,UAA0B,kC,OCa1BA,IAZMA,IAEnBC,cAAA,OAAKC,MAAO,CACXC,QAAS,QACTC,MAAO,QACPC,OAAQ,QACRC,UAAW,UACXC,OAAQ,UACJC,IAAKC,EAAKC,IAAI,W,yECTN,G,MAAA,IAA0B,qC,6BCOzC,MAuDMC,EAAOC,IAAa,IAAZ,KAACC,GAAKD,EACnB,MAAM,KAACE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,GAAQL,EACvD,OACCM,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAChCL,EAAUM,SAAS,uBACnBrB,cAAA,OAAKO,IAAKQ,EAAWN,IAAI,mBAAmBU,UAAU,kBAAkBlB,MAAO,CAACI,UAAW,aAC3FL,cAAA,OAAKO,IAAKQ,EAAWN,IAAI,mBAAmBU,UAAU,oBAEvDD,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAChCpB,cAAA,KAAGmB,UAAU,mBAAkBC,SAAEP,IACjCb,cAAA,KAAGmB,UAAU,oBAAmBC,SAC9BN,EAAYQ,OAAS,IAAG,GAAAC,OAAMT,EAAYU,MAAM,EAAG,KAAI,QAASV,IAElEI,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAChCpB,cAAA,KAAGyB,KAAMT,EAAUG,UAAU,sBAAqBC,SACjDpB,cAAA,OAAKmB,UAAU,QAAOC,SAAC,eAExBpB,cAAA,KAAGyB,KAAMR,EAAME,UAAU,2BAA0BC,SAClDpB,cAAA,OAAKmB,UAAU,QAAOC,SAAC,qBAQdM,MAjFIA,KAClB,MAAOd,EAAMe,GAAWC,mBAAS,OAC3B,QAACC,EAAO,MAAEC,EAAK,aAAEC,EAAY,WAAEC,GAAeC,cAEpDC,qBAAU,KACTC,IACA,MAAMC,EAAUC,YAAYF,EAAY,KAExC,MAAO,KACNG,cAAcF,MAEb,IAEH,MAAMG,EAAgB3B,IACrBe,EAAQf,IAGHuB,EAAaA,KAClBH,IACA,MAAMQ,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DZ,EAAaS,GACXI,KAAKL,IAQFM,EAAef,EAAQ9B,cAACD,IAAY,IAAK,KACzC+C,EAAUjB,EAAU7B,cAAC+C,IAAO,IAAK,KACjCC,EAAYnB,GAAWC,IAAUlB,EAA8B,KAAtBZ,cAACU,EAAI,CAACE,KAAMA,IAE3D,OACCM,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACzB0B,EACAD,EACAG,EACD9B,eAAA,OAAKC,UAAU,qBAAoBC,SAAA,CAClCF,eAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,8BACLpB,cAAA,SAAK,4CAGjCA,cAAA,KAAGmB,UAAU,oBAAmBC,SAAC,0BAGjCpB,cAAA,UAAQiD,QAASA,KApBnBd,KAoByChB,UAAU,sBAAqBC,SACrEpB,cAAA,OAAKmB,UAAU,QAAOC,SAAC,aAExBpB,cAAA,OAAKO,IAAK2C,EAASzC,IAAI,UAAUU,UAAU,kC,0BC2DhCgC,MA3GGC,IACjB,MAAOC,EAAUC,GAAe1B,mBAAS,KAClC2B,EAAgBC,GAAqB5B,oBAAS,IAC9C6B,EAAQC,GAAa9B,mBAAS,MAC9B+B,EAAWC,GAAgBhC,oBAAS,IAErC,QAAEC,EAAO,MAAEC,EAAK,iBAAE+B,GAAqB5B,cAG7CC,qBAAU,KACT4B,EAAUL,GAAQ,KAChB,IAGH,MAAMK,EAAYA,CAACL,EAAQM,KAChBP,GAAVO,GACAF,EAAiBJ,GACfb,KAAKoB,IAGFA,EAAoBC,IACzB,IAAIC,GAAQ,EACRD,EAAY3C,OAAS,IACxB4C,GAAQ,GAETZ,GAAYD,GAAY,IAAIA,KAAaY,KACzCT,GAAkB,GAClBE,GAAUD,GAAUA,EAAS,IAC7BG,GAAaD,GAAaO,KAGrBC,EAAWC,iBAAO,IAElBC,EAAe7B,IACpB2B,EAASG,QAAQC,SAAQC,GAAQA,EAAKC,UAAUC,OAAO,yBACvDP,EAASG,QAAQ9B,GAAIiC,UAAUE,IAAI,uBACnCR,EAASG,QAAQ9B,GAAIoC,SAyCvB,MAAMC,EAvCL,SAAsBC,GACrB,MAAMD,EAASC,EAAIC,KAAI,CAACP,EAAMQ,KAC5B,IAAIC,EAAW,CAAC,UAAc,SAK9B,MAJuB,wEAAnBT,EAAKzD,YACPkE,EAAW,CAAC,UAAc,UAI1BjF,cAACkF,IAAa,CAAeC,QAAS,IAAKC,WAAW,aAAYhE,SAChEF,eAAA,MACEC,UAAU,aACVkE,SAAU,EACVC,IAAKC,GAAMpB,EAASG,QAAQU,GAAKO,EACjCtC,QAASA,KACPG,EAAMoC,eAAehB,EAAKhC,IAC1B6B,EAAYW,IAEdS,WAAaC,IACG,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,MACrBvC,EAAMoC,eAAehB,EAAKhC,IAC1B6B,EAAYW,KAEd5D,SAAA,CACApB,cAAA,OAAKO,IAAKiE,EAAKzD,UAAWN,IAAK+D,EAAK3D,KAAMZ,MAAOgF,IACjDjF,cAAA,OAAKmB,UAAU,aAAYC,SAAEoD,EAAK3D,WAhBpB2D,EAAKhC,OAsB7B,OACExC,cAAA,MAAImB,UAAU,aAAYC,SACxBpB,cAAC4F,IAAe,CAACC,UAAW,KAAKzE,SAC9ByD,MAMKiB,CAAYzC,GAEnBR,EAAef,EAAQ9B,cAACD,IAAY,IAAM,KAC1C+C,EAAUjB,IAAY0B,EAAiBvD,cAAC+C,IAAO,IAAM,KAE3D,OACC7B,eAAA,OAAKC,UAAU,aAAYC,SAAA,CAC1BF,eAAA,MAAIC,UAAU,aAAYC,SAAA,CACxByB,EACAC,EACD9C,cAAC4F,IAAe,CAACC,UAAW,KAAKzE,SAC/ByD,OAGH7E,cAAA,UACCmB,UAAU,mCACV4E,SAAUxC,EACVtD,MAAO,CAAE,QAAW0D,EAAY,OAAS,SACzCV,QAASA,IAAMa,EAAUL,GAAQrC,SAEjCpB,cAAA,OAAKmB,UAAU,QAAOC,SAAC,oB,YCtFZ4E,MAjBEA,IAET9E,eAAA+E,WAAA,CAAA7E,SAAA,CACIpB,cAAA,KAAGmB,UAAU,eAAcC,SAAC,iDAC5BF,eAAA,OAAKC,UAAU,WAAUC,SAAA,CACrBF,eAAA,OAAKC,UAAU,yBAAwBC,SAAA,CACnCpB,cAAA,OAAKmB,UAAU,2BACfnB,cAAA,OAAKmB,UAAU,4BAEnBnB,cAAA,OAAKmB,UAAU,0BACfnB,cAAA,OAAKmB,UAAU,0BACfnB,cAAA,OAAKmB,UAAU,gCCQhB+E,MAjBIA,CAACC,EAASC,EAAWC,KACtC,OAAQF,GACN,IAAK,UACH,OAAOnG,cAACgG,EAAQ,IAElB,IAAK,UACH,OAAOhG,cAAC+C,IAAO,IACjB,IAAK,YACH,OAAO/C,cAACoG,EAAS,CAACC,KAAMA,IAE1B,IAAK,QACH,OAAOrG,cAACD,IAAY,IACtB,QACE,MAAM,IAAIuG,MAAM,8BCXtB,MAiCM5F,EAAO6F,IAAe,IAAd,KAAEF,GAAME,EACrB,MAAM,KAAE1F,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,OAAEuF,GAAWH,EACjE,OACCnF,eAAA+E,WAAA,CAAA7E,SAAA,CACCF,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BL,EAAUM,SAAS,uBACnBrB,cAAA,OAAKO,IAAKQ,EAAWN,IAAKI,EAAMZ,MAAO,CAAEI,UAAW,aACpDL,cAAA,OAAKO,IAAKQ,EAAWN,IAAKI,IAE3BK,eAAA,OAAAE,SAAA,CACCpB,cAAA,OAAKmB,UAAU,kBAAiBC,SAAEP,IAClCK,eAAA,OAAKC,UAAU,aAAYC,SAAA,CAC1BpB,cAAA,KAAGyB,KAAMT,EAAUG,UAAU,sBAAqBC,SACjDpB,cAAA,OAAKmB,UAAU,QAAOC,SAAC,eAExBpB,cAAA,KAAGyB,KAAMR,EAAME,UAAU,2BAA0BC,SAClDpB,cAAA,OAAKmB,UAAU,QAAOC,SAAC,oBAK3BpB,cAAA,OAAKmB,UAAU,cAAaC,SAC1BN,IAEFd,cAAA,OAAKmB,UAAU,eAAcC,SAAC,YAC9BF,eAAA,MAAIC,UAAU,oBAAmBC,SAAA,CAC/BoF,EAAOlF,OAAS,EAAI,KAAO,yCAE3BkF,EAAOzB,KAAI,CAACP,EAAMQ,KACjB,KAAIA,EAAI,GACR,OACChF,cAAA,MAAImB,UAAU,oBAAmBC,SAC/BoD,EAAK3D,MADgCmE,aAe/ByB,MA/EE9F,IAAiB,IAAhB,OAAE+F,GAAQ/F,EAC3B,MAAOC,EAAMe,GAAWC,mBAAS,OAC3B,aAAEG,EAAY,WAAEC,EAAU,QAAEmE,EAAO,WAAEQ,GAAe1E,cAE1DC,qBAAU,KACTC,MACE,CAACuE,IAEJ,MAAMvE,EAAaA,KACbuE,IAIL1E,IACAD,EAAa2E,GACX9D,KAAKL,GACLK,MAAK,IAAM+D,EAAW,iBAGnBpE,EAAgB3B,IACrBe,EAAQf,IAIT,OACCZ,cAAAiG,WAAA,CAAA7E,SACCpB,cAAA,OAAKmB,UAAU,aAAYC,SACzB8E,EAAWC,EAASzF,EAAME,Q,wCC+BhBgG,MAzDIA,KACjB,MAAOhG,EAAMe,GAAWC,mBAAS,KAC3B,mBAAEiF,GAAuB5E,cAOzBM,EAAgB3B,IAElBe,EADW,IAATf,EACMA,EACU,IAATA,EACD,EAEA,OAIZ,OACEZ,cAAC8G,IAAM,CACLC,cAAe,CACbC,KAAM,IAERC,iBAAkBC,IAAW,CAC3BF,KAAME,MACHC,IAAI,EAAG,iBACPC,SAAS,oBAEdC,SAAUC,IAAUxD,OAxBNjD,EAwBgByG,EAAON,UAvBvCH,EAAmBhG,GAAM+B,KAAKL,GADd1B,OAwB6BO,SAE3CF,eAAA,OAAKC,UAAU,cAAaC,SAAA,CAC1BpB,cAAA,OAAKmB,UAAU,mBAAkBC,SAAC,iCAClCF,eAACqG,IAAI,CAACpG,UAAU,OAAMC,SAAA,CACpBF,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAChCpB,cAACwH,IAAK,CAAChF,GAAG,OAAO3B,KAAK,OAAO4G,KAAK,OAAOC,QAASA,IAAM/F,EAAQ,MAChE3B,cAACD,IAAY,CAACoB,UAAU,sBAAsBN,KAAK,OAAOgF,UAAU,QACnEjF,EACCM,eAAA,OAAKC,UAAU,4BAA2BC,SAAA,CAAC,mBAAiBR,EAAKC,KAAK,YAAe,QAEzFK,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAChCpB,cAAA,UAAQyH,KAAK,SAAStG,UAAU,sBAAqBC,SACnDpB,cAAA,OAAKmB,UAAU,QAAOC,SAAC,WAExBR,EACCZ,cAAC2H,IAAI,CAACC,GAAE,eAAArG,OAAiBX,EAAK4B,IAAMrB,UAAU,2BAA0BC,SACtEpB,cAAA,OAAKmB,UAAU,QAAOC,SAAC,cACf,WAGN,IAATR,EACCZ,cAAA,OAAKmB,UAAU,sBAAqBC,SAAC,8DAAkE,WC1DlG,MAA0B,mCCsC1ByG,UA9BEA,KAChB,MAAOC,EAAcC,GAAmBnG,mBAAS,MAMjD,OACCV,eAAA+E,WAAA,CAAA7E,SAAA,CACCpB,cAACgI,IAAa,CAAA5G,SACbpB,cAAC0B,EAAU,MAEZR,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC7BpB,cAACgI,IAAa,CAAA5G,SACbpB,cAACmD,EAAQ,CAACqC,eAXUhD,IACvBuF,EAAgBvF,QAYdtB,eAAA,OAAAE,SAAA,CACCpB,cAACgI,IAAa,CAAA5G,SACbpB,cAACyG,EAAQ,CAACC,OAAQoB,MAEnB9H,cAACgI,IAAa,CAAA5G,SACbpB,cAAC4G,EAAU,YAId5G,cAAA,OAAKmB,UAAU,gBAAgBZ,IAAK0H,EAAYxH,IAAI,gB,gCCjCvD,0BAGA,MAAMuH,UAAsB5B,YAAU8B,cAAA,SAAAC,WAAA,KACrCC,MAAQ,CACPtG,OAAO,GAGRuG,kBAAkBvG,EAAOwG,GACxBC,QAAQC,IAAI1G,EAAOwG,GACnBG,KAAKC,SAAS,CACb5G,OAAO,IAIT6G,SACC,OAAIF,KAAKL,MAAMtG,MAEb9B,cAACD,IAAY,IAGR0I,KAAKrF,MAAMhC,UAIL4G,O","file":"static/js/4.de043438.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\nconst ErrorMessage = () => {\r\n\treturn (\r\n\t\t<img style={{\r\n\t\t\tdisplay: 'block',\r\n\t\t\twidth: '250px',\r\n\t\t\theight: '250px',\r\n\t\t\tobjectFit: 'contain',\r\n\t\t\tmargin: '0 auto'}}\r\n\t\t     src={img} alt=\"Error\"/>\r\n\t)\r\n}\r\n\r\nexport default ErrorMessage;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from '../spinner/Spiner'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\n\r\nconst RandomChar = () => {\r\n\tconst [char, setChar] = useState(null)\r\n\tconst {loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateChar();\r\n\t\tconst timerId = setInterval(updateChar, 60000)\r\n\r\n\t\treturn () => {\r\n\t\t\tclearInterval(timerId)\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char)\r\n\t}\r\n\r\n\tconst updateChar = () => {\r\n\t\tclearError();\r\n\t\tconst id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n\t\tgetCharacter(id)\r\n\t\t\t.then(onCharLoaded)\r\n\t}\r\n\r\n\r\n\tconst onClickTryIt = () => {\r\n\t\tupdateChar();\r\n\t}\r\n\r\n\tconst errorMessage = error ? <ErrorMessage/> : null;\r\n\tconst spinner = loading ? <Spinner/> : null;\r\n\tconst content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n\treturn (\r\n\t\t<div className=\"randomchar\">\r\n\t\t\t{spinner}\r\n\t\t\t{errorMessage}\r\n\t\t\t{content}\r\n\t\t\t<div className=\"randomchar__static\">\r\n\t\t\t\t<p className=\"randomchar__title\">\r\n\t\t\t\t\tRandom character for today!<br/>\r\n\t\t\t\t\tDo you want to get to know him better?\r\n\t\t\t\t</p>\r\n\t\t\t\t<p className=\"randomchar__title\">\r\n\t\t\t\t\tOr choose another one\r\n\t\t\t\t</p>\r\n\t\t\t\t<button onClick={() => onClickTryIt()} className=\"button button__main\">\r\n\t\t\t\t\t<div className=\"inner\">try it</div>\r\n\t\t\t\t</button>\r\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\t\t\r\n\r\nconst View = ({char}) => {\r\n\tconst {name, description, thumbnail, homepage, wiki} = char;\r\n\treturn (\r\n\t\t<div className=\"randomchar__block\">\r\n\t\t\t{thumbnail.includes('image_not_available') ?\r\n\t\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={{objectFit: 'contain'}}/> :\r\n\t\t\t\t<img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\r\n\t\t\t}\r\n\t\t\t<div className=\"randomchar__info\">\r\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\r\n\t\t\t\t<p className=\"randomchar__descr\">\r\n\t\t\t\t\t{description.length > 200 ? `${description.slice(0, 200)} ...` : description}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"randomchar__btns\">\r\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\r\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\r\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default RandomChar;","import { useRef, useState, useEffect } from \"react\";\r\nimport './charList.scss';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from '../spinner/Spiner'\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport PropTypes from 'prop-types'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\nconst CharList = (props) => {\r\n\tconst [charList, setCharList] = useState([]);\r\n\tconst [newItemLoading, setNewItemLoading] = useState(false);\r\n\tconst [offset, setOffset] = useState(210);\r\n\tconst [charEnded, setCharEnded] = useState(false);\r\n\t\r\n\tconst { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tonRequest(offset, true);\r\n\t}, [])\r\n\r\n\r\n\tconst onRequest = (offset, initial) => {\r\n\t\tinitial ? setNewItemLoading(false) : setNewItemLoading(true)\r\n\t\tgetAllCharacters(offset)\r\n\t\t\t.then(onCharListLoaded)\r\n\t}\r\n\r\n\tconst onCharListLoaded = (newCharList) => {\r\n\t\tlet ended = false\r\n\t\tif (newCharList.length < 9) {\r\n\t\t\tended = true;\r\n\t\t}\r\n\t\tsetCharList(charList => [...charList, ...newCharList])\r\n\t\tsetNewItemLoading(false)\r\n\t\tsetOffset(offset => offset + 9)\r\n\t\tsetCharEnded(charEnded => ended)\r\n\t}\r\n\r\n\tconst itemRefs = useRef([]);\r\n\r\n\tconst focusOnItem = (id) => {\r\n\t\titemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n\t\titemRefs.current[id].classList.add('char__item_selected');\r\n\t\titemRefs.current[id].focus();\r\n\t}\r\n\tfunction renderItems (arr){\r\n\t\tconst items =  arr.map((item, i) => {\r\n\t\t\t\tlet imgStyle = {'objectFit' : 'cover'};\r\n\t\t\t\tif (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n\t\t\t\t\t\timgStyle = {'objectFit' : 'unset'};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn (\r\n\t\t\t\t\t\t<CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\r\n\t\t\t\t\t\t\t\t<li \r\n\t\t\t\t\t\t\t\t\t\tclassName=\"char__item\"\r\n\t\t\t\t\t\t\t\t\t\ttabIndex={0}\r\n\t\t\t\t\t\t\t\t\t\tref={el => itemRefs.current[i] = el}\r\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tprops.onCharSelected(item.id);\r\n\t\t\t\t\t\t\t\t\t\t\t\tfocusOnItem(i);\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (e.key === ' ' || e.key === \"Enter\") {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.onCharSelected(item.id);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfocusOnItem(i);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"char__name\">{item.name}</div>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t</CSSTransition>\r\n\t\t\t\t)\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t\t<ul className=\"char__grid\">\r\n\t\t\t\t\t\t<TransitionGroup component={null}>\r\n\t\t\t\t\t\t\t\t{items}\r\n\t\t\t\t\t\t</TransitionGroup>\r\n\t\t\t\t</ul>\r\n\t\t)\r\n}\r\n\r\nconst items = renderItems(charList);\r\n\r\n\tconst errorMessage = error ? <ErrorMessage /> : null;\r\n\tconst spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n\treturn (\r\n\t\t<div className=\"char__list\">\r\n\t\t\t<ul className=\"char__grid\">\r\n\t\t\t\t{errorMessage}\r\n\t\t\t\t{spinner}\r\n\t\t\t\t<TransitionGroup component={null}>\r\n\t\t\t\t\t{items}\r\n\t\t\t\t</TransitionGroup>\r\n\t\t\t</ul>\r\n\t\t\t<button\r\n\t\t\t\tclassName=\"button button__main button__long\"\r\n\t\t\t\tdisabled={newItemLoading}\r\n\t\t\t\tstyle={{ 'display': charEnded ? 'none' : 'block' }}\r\n\t\t\t\tonClick={() => onRequest(offset)}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"inner\">load more</div>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nCharList.propTypes = {\r\n\tonCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spiner'\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage'\r\nimport Skeleton from '../components/skeleton/Skeleton'\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case('waiting'):\r\n      return <Skeleton />;\r\n      break;\r\n    case('loading'): \r\n      return <Spinner />;\r\n    case('confirmed'): \r\n      return <Component data={data} />;\r\n      break;\r\n    case('error'):\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state')\r\n  }\r\n}\r\n\r\nexport default setContent;","import { useState, useEffect } from \"react\";\r\nimport './charInfo.scss';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from '../../utils/setContent'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst CharInfo = ({ charId }) => {\r\n\tconst [char, setChar] = useState(null)\r\n\tconst { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateChar()\r\n\t}, [charId]);\r\n\r\n\tconst updateChar = () => {\r\n\t\tif (!charId) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tclearError();\r\n\t\tgetCharacter(charId)\r\n\t\t\t.then(onCharLoaded)\r\n\t\t\t.then(() => setProcess('confirmed'))\r\n\t}\r\n\r\n\tconst onCharLoaded = (char) => {\r\n\t\tsetChar(char)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"char__info\">\r\n\t\t\t\t{setContent(process, View, char)}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nconst View = ({ data }) => {\r\n\tconst { name, description, thumbnail, homepage, wiki, comics } = data;\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"char__basics\">\r\n\t\t\t\t{thumbnail.includes('image_not_available') ?\r\n\t\t\t\t\t<img src={thumbnail} alt={name} style={{ objectFit: 'contain' }} /> :\r\n\t\t\t\t\t<img src={thumbnail} alt={name} />\r\n\t\t\t\t}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"char__info-name\">{name}</div>\r\n\t\t\t\t\t<div className=\"char__btns\">\r\n\t\t\t\t\t\t<a href={homepage} className=\"button button__main\">\r\n\t\t\t\t\t\t\t<div className=\"inner\">homepage</div>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\r\n\t\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"char__descr\">\r\n\t\t\t\t{description}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"char__comics\">Comics:</div>\r\n\t\t\t<ul className=\"char__comics-list\">\r\n\t\t\t\t{comics.length > 0 ? null : \"There is no comics with this character\"}\r\n\t\t\t\t{\r\n\t\t\t\t\tcomics.map((item, i) => {\r\n\t\t\t\t\t\tif (i > 9) return;\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<li className=\"char__comics-item\" key={i}>\r\n\t\t\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\r\n\t\t\t</ul>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nCharInfo.propTypes = {\r\n\tcharId: PropTypes.number\r\n}\r\nexport default CharInfo;","import { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport \"./SearchForm.scss\"\r\n\r\nconst SearchForm = () => {\r\n  const [char, setChar] = useState('');\r\n  const { getCharacterByName } = useMarvelService();\r\n\r\n\r\n  const onRequest = name => {\r\n    getCharacterByName(name).then(onCharLoaded)\r\n  }\r\n\r\n  const onCharLoaded = (char) => {\r\n    if (char !== 0) {\r\n      setChar(char)\r\n    } else if (char === 0) {\r\n      setChar(0)\r\n    } else {\r\n      setChar(null)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        text: ''\r\n      }}\r\n      validationSchema={Yup.object({\r\n        text: Yup.string()\r\n          .min(2, \"Min 2 symbols\")\r\n          .required(\"Required field\"),\r\n      })}\r\n      onSubmit={values => onRequest(values.text)}\r\n    >\r\n      <div className=\"search-form\">\r\n        <div className=\"search-form-name\">Or find a character by name:</div>\r\n        <Form className=\"form\">\r\n          <div className=\"search-form-input\">\r\n            <Field id=\"text\" name=\"text\" type=\"text\" onFocus={() => setChar('')} />\r\n            <ErrorMessage className='search-form-message' name=\"text\" component=\"div\" />\r\n            {char ?\r\n              <div className='search-form-message green'>There is! Visit {char.name} page?</div> : null}\r\n          </div>\r\n          <div className=\"search-form__btns\">\r\n            <button type=\"submit\" className=\"button button__main\">\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n            {char ?\r\n              <Link to={`/characters/${char.id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">to page</div>\r\n              </Link> : null}\r\n          </div>\r\n        </Form>\r\n        {char === 0 ?\r\n          <div className='search-form-message'>The character was not found. Check the name and try again</div> : null}\r\n      </div>\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default SearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import RandomChar from \"../randomChar/RandomChar\";\r\nimport { useState } from \"react\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport SearchForm from \"../searchForm/SearchForm\"\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\tconst [selectedChar, setSelectedChar] = useState(null);\r\n\r\n\tconst onCharSelected = (id) => {\r\n\t\tsetSelectedChar(id)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<RandomChar />\r\n\t\t\t</ErrorBoundary>\r\n\t\t\t<div className=\"char__content\">\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CharList onCharSelected={onCharSelected} />\r\n\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CharInfo charId={selectedChar} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<SearchForm />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default MainPage;","import {Component} from 'react';\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n\tstate = {\r\n\t\terror: false\r\n\t}\r\n\r\n\tcomponentDidCatch(error, errorInfo) {\r\n\t\tconsole.log(error, errorInfo);\r\n\t\tthis.setState({\r\n\t\t\terror: true\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.error) {\r\n\t\t\treturn (\r\n\t\t\t\t<ErrorMessage />\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;"],"sourceRoot":""}